<?php

/**
 * Implements hook_menu
 *
 * @return array
 */
function supposeso_menu() {
  $items = [
    'admin/config/supposeso' => [
    'title'            => 'Suppose So Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => ['supposeso__form_settings'],
    'access arguments' => ['administer content'],
    ]
  ];
  return $items;
}

/**
 */
function supposeso_preprocess_page(&$variables) {

  $supposeso = supposeso();
  if ($supposeso->pathMatchesExclude(current_path())) {
    // This path is excluded.
    return;
  }
  $publicConfig = $supposeso->getClientConfig();
  // nope: $variables['#attached']['js']...
  // nope: $variables['page']['#attached']['js']...
  drupal_add_js(drupal_get_path('module', 'supposeso') . '/js/supposeso.js');
  drupal_add_js(['supposeso' => $publicConfig], 'setting');
}

/**
 * Form for settings.
 */
function supposeso__form_settings($form, &$form_state) {
  $html = file_get_contents(__DIR__ . '/templates/settings.tpl.html');
  $html = str_replace('{} /*config*/', supposeso()->getConfigJson(), $html);

  $supposeso = supposeso();

  $form['banner_text'] = [
    '#type'          => 'text_format',
    '#rows'          => 4,
    '#title'         => 'Banner text',
    '#default_value' => $supposeso->getBannerText(),
    '#format'        => $supposeso->getBannerTextFormat(),
  ];

  $form['main_config'] = [
    '#type'          => 'hidden',
    '#default_value' => $supposeso->getConfigJson(),
    '#suffix'        => $html,
  ];

  $form['submit'] = [
    '#type'  => 'submit',
    '#value' => 'Save',
  ];

  return $form;
}

/**
 * Form for settings.
 */
function supposeso__form_settings_submit($form, &$form_state) {
  $config = json_decode($form_state['values']['main_config'], TRUE);
  $config['bannerText'] = $form_state['values']['banner_text']['value'];
  $config['bannerTextFormat'] = $form_state['values']['banner_text']['format'];
  supposeso()->saveConfig($config);
  $form_state['redirect'] = '/admin/config/supposeso';
}

// Utility.
/**
 * Sugar access
 *
 * @return SupposeSo
 */
function supposeso() {
  return SupposeSo::singleton();
}

class SupposeSo {

  /** @var SupposeSo Holds singleton. */
  protected static $singleton;

  /** @var array */
  protected $config;

  /**
   * Return singleton.
   */
  public static function singleton() {
    if (!isset(static::$singleton)) {
      static::$singleton = new static();
    }
    return static::$singleton;
  }

  /**
   * Constructor
   */
  public function __construct() {
    $this->config = $this->validateConfig(unserialize(variable_get('supposeso_config')));
  }

  /**
   * Ensure given config is valid.
   * @todo
   *
   * @param array $config
   * @return array
   */
  public function validateConfig($config) {
    $defaults = [
        'bannerText'       => '<p>Cookie information</p>',
        'bannerTextFormat' => 'filtered_html',
        'permissions'      => ['essential'],
        'buttons'          => [
          [
            'text'        => 'Essential Only',
            'cssClass'    => 'secondary',
            'permissions' => ['essential'],
          ],
        ],
        'excludePaths'    => [],
      ];

    if (!is_array($config)) {
      return $defaults;
    }

    $config['permissions'] = array_filter($config['permissions'], function ($p) {
      return (preg_match('/^[a-zA-Z0-9_]+$/', $p));
    });

    foreach ($config['buttons'] as $i => $button) {
      $button['permissions'] = array_filter($button['permissions'], function ($p) use ($config) {
        return in_array($p, $config['permissions']);
      });
      $button['text'] = strip_tags($button['text']);
      $button['cssClass'] = preg_replace('/[a-zA-Z0-9_-]+/', '-', $button['cssClass']);
    }

    $config = array_intersect_key($config, array_fill_keys(['buttons', 'permissions', 'bannerText', 'bannerTextFormat', 'excludePaths'], NULL));

    $config += $defaults;

    return $config;
  }

  /**
   * Returns config as json encoded string.
   * @return string
   */
  public function getConfigJson() {
    return json_encode($this->config);
  }

  /**
   * Returns config for browser
   *
   * @return array
   */
  public function getClientConfig() {
    $config['buttons'] = $this->config['buttons'];
    $config['text'] = check_markup($this->config['bannerText'], $this->config['bannerTextFormat']);
    return $config;
  }

  /**
   * @return string;
   */
  public function getBannerText() {
    return $this->config['bannerText'] ?? '';
  }

  /**
   * @return string;
   */
  public function getBannerTextFormat() {
    return $this->config['bannerTextFormat'] ?? 'filtered_html';
  }
  /**
   * validate and save config.
   *
   * @param array $config
   */
  public function saveConfig($config) {
    $this->config = $this->validateConfig($config);
    variable_set('supposeso_config', serialize($this->config));
  }
  /**
   * Does the given path match the exclude paths?
   *
   * @return boolean
   */
  public function pathMatchesExclude($path) {
    foreach (($this->config['excludePaths'] ?? []) as $pattern) {
      if ($pattern && fnmatch($pattern, $path)) {
        // Matched an exclude. Do nothing.
        return TRUE;
      }
    }
    return FALSE;
  }
}
